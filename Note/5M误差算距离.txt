#include "stdio.h"
#include "string.h"
#include "stdlib.h"
#include "stdint.h"
#include "math.h"


#define PI acos(-1)
#define X_PI (PI * 3000.0 / 180.0)
#define A 6378245.0
#define EE 0.00669342162296594323
#define EARTH_RADIUS 6371000
/**
 * 判断给定的经纬度是否在中国境内
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @return 如果在中国境内返回0，否则返回1
 */
int out_of_china(double lon, double lat) {
    if (lon < 72.004 || lon > 137.8347) {
        return 1;
    }
    if (lat < 0.8293 || lat > 55.8271) {
        return 1;
    }
    return 0;
}


double transform_latitude(double lon, double lat) {
    double ret = -100.0 + 2.0 * lon + 3.0 * lat + 0.2 * lat * lat + 0.1 * lon * lat + 0.2 * sqrt(fabs(lon));
    ret += (20.0 * sin(6.0 * lon * PI) + 20.0 * sin(2.0 * lon * PI)) * 2.0 / 3.0;
    ret += (20.0 * sin(lat * PI) + 40.0 * sin(lat / 3.0 * PI)) * 2.0 / 3.0;
    ret += (160.0 * sin(lat / 12.0 * PI) + 320 * sin(lat * PI / 30.0)) * 2.0 / 3.0;
    return ret;
}

double transform_longitude(double lon, double lat) {
    double ret = 300.0 + lon + 2.0 * lat + 0.1 * lon * lon + 0.1 * lon * lat + 0.1 * sqrt(fabs(lon));
    ret += (20.0 * sin(6.0 * lon * PI) + 20.0 * sin(2.0 * lon * PI)) * 2.0 / 3.0;
    ret += (20.0 * sin(lon * PI) + 40.0 * sin(lon / 3.0 * PI)) * 2.0 / 3.0;
    ret += (150.0 * sin(lon / 12.0 * PI) + 300.0 * sin(lon / 30.0 * PI)) * 2.0 / 3.0;
    return ret;
}

/**
 * 将WGS84坐标转换为GCJ02坐标
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void wgs84_to_gcj02(double lon, double lat, double *output) {
    if (out_of_china(lon, lat) == 0) {
        double d_lat = transform_latitude(lon - 105.0, lat - 35.0);
        double d_lon = transform_longitude(lon - 105.0, lat - 35.0);
        double rad_lat = lat / 180.0 * PI;
        double magic = sin(rad_lat);
        magic = 1 - EE * magic * magic;
        double sqrt_magic = sqrt(magic);
        d_lat = (d_lat * 180.0) / ((A * (1 - EE)) / (magic * sqrt_magic) * PI);
        d_lon = (d_lon * 180.0) / (A / sqrt_magic * cos(rad_lat) * PI);
        output[0] = lon + d_lon;
        output[1] = lat + d_lat;
    } else {
        output[0] = lon;
        output[1] = lat;
    }
}

/**
 * 将GCJ02坐标转换为WGS84坐标
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void gcj02_to_wgs84(double lon, double lat, double *output) {
    if (out_of_china(lon, lat) == 0) {
        double d_lat = transform_latitude(lon - 105.0, lat - 35.0);
        double d_lon = transform_longitude(lon - 105.0, lat - 35.0);
        double rad_lat = lat / 180.0 * PI;
        double magic = sin(rad_lat);
        magic = 1 - EE * magic * magic;
        double sqrt_magic = sqrt(magic);
        d_lat = (d_lat * 180.0) / ((A * (1 - EE)) / (magic * sqrt_magic) * PI);
        d_lon = (d_lon * 180.0) / (A / sqrt_magic * cos(rad_lat) * PI);
        double mg_lat = lat + d_lat;
        double mg_lon = lon + d_lon;
        output[0] = lon * 2 - mg_lon;
        output[1] = lat * 2 - mg_lat;
    } else {
        output[0] = lon;
        output[1] = lat;
    }
}

/**
 * 将GCJ02坐标转换为BD09坐标
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void gcj02_to_bd09(double lon, double lat, double *output) {
    double x = lon, y = lat;
    double z = sqrt(x * x + y * y) + 0.00002 * sin(y * X_PI);
    double theta = atan2(y, x) + 0.000003 * cos(x * X_PI);
    output[0] = z * cos(theta) + 0.0065;
    output[1] = z * sin(theta) + 0.006;
}

/**
 * 将BD09坐标转换为GCJ02坐标
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void bd09_to_gcj02(double lon, double lat, double *output) {
    double x = lon - 0.0065, y = lat - 0.006;
    double z = sqrt(x * x + y * y) - 0.00002 * sin(y * X_PI);
    double theta = atan2(y, x) - 0.000003 * cos(x * X_PI);
    output[0] = z * cos(theta);
    output[1] = z * sin(theta);
}


/**
 * 将WGS84坐标转换为BD09坐标
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void wgs84_to_bd09(double lon, double lat, double *output) {
    double gcj02[2];
    wgs84_to_gcj02(lon, lat, gcj02);
    gcj02_to_bd09(gcj02[0], gcj02[1], output);
}

/**
 * 将BD09坐标转换为WGS84坐标
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void bd09_to_wgs84(double lon, double lat, double *output) {
    double gcj02[2];
    bd09_to_gcj02(lon, lat, gcj02);
    gcj02_to_wgs84(gcj02[0], gcj02[1], output);
}

double FindDouHao(int DouHaoPos, const char* GPSData, int length)
{
	char str[length];
	strncpy(str, GPSData, length);
	str[length - 1] = '\0'; // Make sure the string is null-terminated

	char* ptr = strtok(str, ",");
	int CountNum = 0;
	
	double Data = 0;
	
	while(ptr != NULL)
	{
		ptr = strtok(NULL, ",");
		CountNum++;
		
		if(CountNum == DouHaoPos)
		{
			Data = strtod(ptr, NULL);
			break;
		}	
	}
	
	return Data;
}

double degreeToRadian(double degree)
{
    return degree * PI / 180.0;
}
double distanceBetweenPoints(double lat1, double lon1, double lat2, double lon2)
{
    double phi1 = degreeToRadian(lat1);
    double phi2 = degreeToRadian(lat2);
    double delta_phi = degreeToRadian(lat2 - lat1);
    double delta_lambda = degreeToRadian(lon2 - lon1);
    
    double a = pow(sin(delta_phi/2),2) + cos(phi1) * cos(phi2) * pow(sin(delta_lambda/2),2);
    double c = 2 * atan2(sqrt(a), sqrt(1-a));
    
    return EARTH_RADIUS * c;
}
int main()
{
	//$GPGGA,021850.00,2233.51747,N,11356.58160,E,1,09,0.97,69.2,M,-2.7,M,,*7A
	//$GPGGA,014434.70,3817.13334637,N,12139.72994196,E,4,07,1.5,6.571,M,8.942,M,0.7,0016*79
	char GPSData[]="$GPGGA,021850.00,2233.51747,N,11356.58160,E,1,09,0.97,69.2,M,-2.7,M,,*7A";
	int length = sizeof(GPSData) / sizeof(GPSData[0]);
	
	
	int CalResult = GPSData[1];				
	for(int i = 2; GPSData[i] != '*'; i++)
	{
			CalResult ^= GPSData[i];
	}
	//printf("异或校验计算的：%x\n", result);
	char RefVerifyData[]="*";
	char *VerifyPosition=strstr(GPSData,RefVerifyData);
	//printf("数据中的：%s\n", VerifyPosition+1);
	// 比较 result 和 Position+1
	if (CalResult == strtol(VerifyPosition + 1, NULL, 16))
	{
		double WeiDu = FindDouHao(2, GPSData, length);
		double JingDu = FindDouHao(4, GPSData, length);
		
		double WD=WeiDu/100;
		int ZSWD=(int)WD;
		double XSWD=WD-ZSWD;
		
		double JD=JingDu/100;
		int ZSJD=(int)JD;
		double XSJD=JD-ZSJD;
			
		//printf("----------换算中...----------\n"); 
		printf("GPGGA协议经过处理后得到的GPS坐标......\n");
		double TrueWeiDu=ZSWD+(XSWD/0.6);
		double TrueJingDu=ZSJD+(XSJD/0.6);
		printf("经度：%f     纬度：%f\n", TrueJingDu, TrueWeiDu);		//纬度：38.285556     经度：121.662166
	    double ret[2];
	    //测试wgs转百度
	    wgs84_to_bd09(TrueJingDu, TrueWeiDu, ret);
	    printf("\n"); 
	    printf("GPGGA协议坐标提取转换为百度坐标......\n");
	    printf("经度：%f     纬度：%f\n", ret[0], ret[1]);
	    printf("\n"); 
	    printf("\n"); 
		printf("相同。\n");
		
	/*BD坐标 
	经度：113.954462     纬度：22.561296
	经度：70.954462     纬度：26.561296
	程序计算的：4351616.49 m
	在线计算的：4351610.49 m
	*/
	double lat1 = 22.558624; // 纬度
    double lon1 = 113.943027; // 经度
    double lat2 = 26.321523; 
    double lon2 = 70.365824;

    double distance = distanceBetweenPoints(lat1, lon1, lat2, lon2);
    
    printf("这两点之间的距离是：%.2f 米\n", distance);

		
	
	}else{
		printf("不同。\n");
	}
	
	
	
	

/*
经度				121.662166			纬度	38.285556 
计算出来的			121.673529					38.292506
网页计算的			121.67352915211312			38.292506680811684
 */
    return 0;   
}